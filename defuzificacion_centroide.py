"""
Script 3: Defuzificaci√≥n por M√©todo del Centroide
C√°lculo del centroide para convertir valores difusos en valores precisos
Autor: Gabriel Carriel
Fecha: Octubre 2025
Inteligencia Artificial - L√≥gica Difusa
"""

import numpy as np

def calcular_centroide(valores, grados):
   
    if len(valores) != len(grados):
        raise ValueError("Las listas deben tener la misma longitud")
    
    if sum(grados) == 0:
        raise ValueError("La suma de grados no puede ser cero")
    
    numerador = sum(mu * x for mu, x in zip(grados, valores))
    denominador = sum(grados)
    centroide = numerador / denominador
    
    return centroide

def mostrar_calculo_detallado(valores, grados):
    
    print("\nüìù C√ÅLCULO DETALLADO:")
    print("=" * 60)
    print("\nF√≥rmula del Centroide: C = Œ£(Œº·µ¢ √ó x·µ¢) / Œ£(Œº·µ¢)\n")
    
    print("Valores (x·µ¢) y sus grados de pertenencia (Œº·µ¢):")
    print("-" * 60)
    
    productos = []
    for i, (x, mu) in enumerate(zip(valores, grados), 1):
        producto = mu * x
        productos.append(producto)
        print(f"  {i}. Œº = {mu:.2f}, x = {x:5.1f} ‚Üí Œº √ó x = {mu:.2f} √ó {x:5.1f} = {producto:6.2f}")
    
    print("-" * 60)
    
    numerador = sum(productos)
    denominador = sum(grados)
    
    print(f"\nNumerador   (Œ£ Œº·µ¢ √ó x·µ¢) = {' + '.join(f'{p:.2f}' for p in productos)}")
    print(f"                          = {numerador:.2f}")
    
    print(f"\nDenominador (Œ£ Œº·µ¢)       = {' + '.join(f'{g:.2f}' for g in grados)}")
    print(f"                          = {denominador:.2f}")
    
    centroide = numerador / denominador
    print(f"\nCentroide = {numerador:.2f} / {denominador:.2f} = {centroide:.2f}")
    print("=" * 60)
    
    return centroide

def ejemplo_ventilador(temperatura, humedad):
    
    # Grados de pertenencia seg√∫n temperatura y humedad
    # Simulamos resultados de inferencia difusa
    
    if temperatura < 20:
        grados = [0.8, 0.2, 0.0]  # Bajo, Medio, Alto
    elif temperatura < 28:
        grados = [0.2, 0.7, 0.1]
    else:
        grados = [0.0, 0.3, 0.7]
    
    # Ajuste por humedad
    if humedad > 70:
        grados = [g * 1.2 if i == 2 else g for i, g in enumerate(grados)]
    
    # Normalizar para que sumen <= 1
    suma = sum(grados)
    if suma > 1:
        grados = [g / suma for g in grados]
    
    # Velocidades correspondientes
    velocidades = [20, 50, 80]  # Bajo, Medio, Alto
    
    return velocidades, grados

def main():
    print("=" * 60)
    print("DEFUZIFICACI√ìN POR M√âTODO DEL CENTROIDE")
    print("=" * 60)
    
    # CASO 1: Ejemplo de la gu√≠a pr√°ctica
    print("\nüìç CASO 1: Ejemplo de la Gu√≠a Pr√°ctica")
    print("-" * 60)
    valores_guia = [10, 20, 30]
    grados_guia = [0.2, 0.5, 0.8]
    
    print(f"Valores:              {valores_guia}")
    print(f"Grados de pertenencia: {grados_guia}")
    
    centroide_guia = mostrar_calculo_detallado(valores_guia, grados_guia)
    
    print(f"\n‚úÖ Resultado: El valor defuzificado es {centroide_guia:.2f}")
    
    # CASO 2: Control de ventilador
    print("\n\nüìç CASO 2: Sistema de Control de Ventilador")
    print("-" * 60)
    
    temp = 26
    hum = 65
    
    print(f"Condiciones ambientales:")
    print(f"  - Temperatura: {temp}¬∞C")
    print(f"  - Humedad: {hum}%")
    
    velocidades, grados_ventilador = ejemplo_ventilador(temp, hum)
    
    print(f"\nVelocidades posibles: {velocidades} (Bajo, Medio, Alto)")
    print(f"Grados de activaci√≥n: {[f'{g:.2f}' for g in grados_ventilador]}")
    
    velocidad_final = calcular_centroide(velocidades, grados_ventilador)
    
    print(f"\nüîß Velocidad del ventilador calculada: {velocidad_final:.1f}%")
    
    # CASO 3: M√∫ltiples escenarios
    print("\n\nüìç CASO 3: An√°lisis de M√∫ltiples Escenarios")
    print("-" * 60)
    
    escenarios = [
        ([10, 20, 30], [0.9, 0.1, 0.0], "Fr√≠o"),
        ([10, 20, 30], [0.1, 0.8, 0.1], "Templado"),
        ([10, 20, 30], [0.0, 0.2, 0.8], "Caliente"),
        ([10, 20, 30], [0.3, 0.4, 0.3], "Moderado")
    ]
    
    print("\nEscenario     | Grados Œº        | Centroide | Interpretaci√≥n")
    print("-" * 60)
    
    for valores, grados, desc in escenarios:
        c = calcular_centroide(valores, grados)
        grados_str = str([f'{g:.1f}' for g in grados])
        print(f"{desc:13} | {grados_str:15} | {c:6.2f}    | Nivel: {c/30*100:.0f}%")
    
    # Interpretaci√≥n
    print("\nüí° INTERPRETACI√ìN:")
    print("-" * 60)
    print("""
El m√©todo del centroide permite convertir m√∫ltiples valores difusos
en una decisi√≥n num√©rica precisa. Es especialmente √∫til en:

‚Ä¢ Sistemas de control autom√°tico (temperatura, velocidad, presi√≥n)
‚Ä¢ Toma de decisiones con informaci√≥n imprecisa
‚Ä¢ Regulaci√≥n gradual de actuadores
‚Ä¢ Sistemas expertos con salidas continuas

El valor resultante representa un "compromiso ponderado" entre
todas las posibles acciones, considerando sus grados de activaci√≥n.
    """)
    
    print("=" * 60)

if __name__ == "__main__":
    main()
